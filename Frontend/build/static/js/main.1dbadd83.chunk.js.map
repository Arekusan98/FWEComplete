{"version":3,"sources":["ResultEmptyMessage.tsx","AddIngredientToRecipe.tsx","EditRecipe.tsx","RecipeDetail.tsx","AddRecipe.tsx","Dashboard.tsx","index.tsx"],"names":["EmptyMessage","children","AddIngredient","recipeId","addHandler","useState","showUseEffect","setShowUseEffect","className","onClick","AddIngredientInterface","type","name","e","validateAndSave","currentTarget","parentElement","then","addIngredientForm","a","jsonRequestBody","amount","ingredientToCheck","imageUrl","i","length","tagName","inputElement","value","createIngredientIfNotExists","undefined","ingredientToAdd","console","log","addIngredientToRecipeOnDatabase","id","fetchIngredients","fetch","ingredientRequest","json","ingredientResponse","data","addIngredientToDatabase","requestOptions","method","headers","body","JSON","stringify","response","ingredientId","EditRecipe","recipe","editHandler","EditRecipeInterface","defaultValue","cookingInstructions","author","rating","servingSize","updateRecipe","recipeForm","updateRecipeOnDatabase","RecipeDetail","setState","setRecipe","ingredients","setIngredients","ingredientsRequest","fetchRecipe","recipeRequest","recipeJson","useEffect","ingredientObjects","forEach","ingredient","push","deleteHandler","GenerateRecipe","toString","GenerateIngredient","deleteIngredientFromRecipe","IngredientAmount","ingredientToRecipe","setIngredientToRecipe","fetchIngredientToRecipe","ingredientToRecipeRequest","ingredientsToRecipeResponse","AddRecipe","AddNewRecipeInterface","addRecipeToDatabase","showRecipeDetailsButton","recipeDetailId","Dashboard","recipes","setRecipes","fetchRecipes","recipeObjects","detailsBtn","GenerateRecipeList","deleteRecipe","main","document","getElementsByTagName","ReactDOM","render"],"mappings":"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","file":"static/js/main.1dbadd83.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport const EmptyMessage : React.FC<{}> = ({children}) => {\r\n    return <div>{children}</div>\r\n}","import React, { useState } from \"react\";\r\nimport { IngredientRequestBody, FormIngredient, singleIngredientResponse } from \"./Interfaces/Ingredient\";\r\nimport { RecipeDetail } from \"./RecipeDetail\";\r\nimport ReactDOM, { render } from \"react-dom\";\r\n\r\nexport const AddIngredient : React.FC<{recipeId: number, addHandler: Function}> = ({children, recipeId, addHandler}) => {\r\n    const [showUseEffect, setShowUseEffect] = useState(false);\r\n    return <>\r\n    <section className=\"addIngredientFormContainer\">\r\n    <button className=\"addIngredientButton\" onClick={() => {\r\n        setShowUseEffect(!showUseEffect);\r\n    }}>Zutat hinzufügen</button>\r\n    {showUseEffect && <AddIngredientInterface recipeId={recipeId} addHandler={addHandler}/>}\r\n    </section></>;\r\n    }\r\n\r\nconst AddIngredientInterface : React.FC<{recipeId: number, addHandler : Function}> = ({children, recipeId, addHandler}) => {\r\n    return <>\r\n    <form className=\"addIngredientForm\">\r\n        <label>Name</label>\r\n        <input type=\"text\" name=\"name\"></input>\r\n        <label>Menge</label>\r\n        <input type=\"text\" name=\"amount\"></input>\r\n        <label>Bild</label>\r\n        <input type=\"text\" name=\"imageUrl\"></input>\r\n        <button type=\"button\" onClick={(e)=>{validateAndSave(e.currentTarget.parentElement, recipeId).then(addHandler())}}>Hinzufügen</button>\r\n    </form>\r\n    </>\r\n}\r\n\r\nasync function validateAndSave(addIngredientForm :HTMLElement | null, recipeId : number){\r\n    if(addIngredientForm === null){\r\n        return;\r\n    }\r\n\r\n    var jsonRequestBody : IngredientRequestBody = {\r\n        amount: \"\",\r\n    };\r\n\r\n    var ingredientToCheck : FormIngredient = {\r\n        name : \"\",\r\n        imageUrl: \"\"\r\n    }\r\n\r\n    for (let i = 0; i <addIngredientForm.children.length; i++){\r\n        if(addIngredientForm.children[i].tagName === \"INPUT\"){\r\n            let inputElement = addIngredientForm.children[i] as HTMLInputElement;\r\n            switch(inputElement.name){\r\n                case \"amount\":\r\n                jsonRequestBody.amount = inputElement.value;\r\n                    break;\r\n                case \"name\":\r\n                ingredientToCheck.name = inputElement.value;\r\n                    break;\r\n                case \"imageUrl\":\r\n                ingredientToCheck.imageUrl = inputElement.value;\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    const ingredientToAdd = await createIngredientIfNotExists(ingredientToCheck);\r\n    if(ingredientToAdd !== undefined){\r\n        console.log(recipeId);\r\n    await addIngredientToRecipeOnDatabase(jsonRequestBody.amount, ingredientToAdd.id, recipeId);\r\n    }\r\n}\r\n\r\nconst createIngredientIfNotExists = async (ingredientToCheck: FormIngredient) => {\r\n    const fetchIngredients = async () => {\r\n        const ingredientRequest = await fetch(\"http://localhost:3000/api/ingredient/name/\"+ingredientToCheck.name);\r\n        const ingredientResponse = (await ingredientRequest.json()) as singleIngredientResponse;\r\n        return ingredientResponse;\r\n    }\r\n\r\n    var ingredientResponse = await fetchIngredients();\r\n    if(ingredientResponse.data === undefined){\r\n        await addIngredientToDatabase(ingredientToCheck);\r\n        ingredientResponse = await fetchIngredients();\r\n    }\r\n    return ingredientResponse.data;\r\n}\r\n\r\nconst addIngredientToDatabase = async (jsonRequestBody: FormIngredient)=>{\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: {'Content-Type' : 'application/json'},\r\n        body: JSON.stringify(jsonRequestBody)\r\n      }\r\n    await fetch(\"http://localhost:3000/api/ingredient\", requestOptions).then(response => response.json());\r\n}\r\n\r\nconst addIngredientToRecipeOnDatabase = async (amount: string, ingredientId: number, recipeId: number) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: {'Content-Type' : 'application/json'},\r\n        body: JSON.stringify({amount: amount})\r\n      } \r\n    await fetch(\"http://localhost:3000/api/recipe/\"+recipeId+\"/ingredients/\"+ingredientId, requestOptions).then(response => response.json());\r\n}","import { Recipe, RecipeRequest } from \"./Interfaces/Recipe\";\r\nimport React, { useState } from \"react\";\r\n\r\nexport const EditRecipe : React.FC<{recipe: Recipe, editHandler: Function}> = ({children, recipe, editHandler}) => {\r\n    const [showUseEffect, setShowUseEffect] = useState(false);\r\n    return <>\r\n    <section className=\"editRecipeFormContainer\">\r\n    <button className=\"editRecipeButton\" onClick={() => {\r\n        setShowUseEffect(!showUseEffect);\r\n    }}>Rezept bearbeiten</button>\r\n    {showUseEffect && <EditRecipeInterface recipe={recipe} editHandler={editHandler}/>}\r\n    </section></>;\r\n    }\r\n\r\nconst EditRecipeInterface : React.FC<{recipe: Recipe, editHandler: Function}> = ({children, recipe, editHandler}) => {\r\n    return <>\r\n    <form className=\"editRecipeForm\">\r\n        <label>Name</label>\r\n        <input type=\"text\" name=\"name\" defaultValue={recipe.name}></input>\r\n        <label>Kochanweisungen</label>\r\n        <input type=\"textarea\" name=\"instructions\" defaultValue={recipe.cookingInstructions}></input>\r\n        <label>Autor</label>\r\n        <input type=\"text\" name=\"author\" defaultValue={recipe.author}></input>\r\n        <label>Bewertung</label>\r\n        <input type=\"number\" name=\"rating\" defaultValue={recipe.rating}></input>\r\n        <label>Portionsgröße</label>\r\n        <input type=\"number\" name=\"size\" defaultValue={recipe.servingSize}></input>\r\n        <button type=\"button\" onClick={(e)=>{updateRecipe(e.currentTarget.parentElement, recipe.id).then(editHandler())}}>Speichern</button>\r\n    </form>\r\n    </>\r\n}\r\n\r\n\r\nasync function updateRecipe(recipeForm :HTMLElement | null, recipeId: number){\r\n    if(recipeForm === null){\r\n        return;\r\n    }\r\n\r\n    var jsonRequestBody : RecipeRequest = {\r\n        name: \"\",\r\n        cookingInstructions: \"\",\r\n        rating: 0,\r\n        author: \"\",\r\n        servingSize: 0\r\n    };\r\n\r\n    for (let i = 0; i <recipeForm.children.length; i++){\r\n        if(recipeForm.children[i].tagName === \"INPUT\"){\r\n            let inputElement = recipeForm.children[i] as HTMLInputElement;\r\n            switch(inputElement.name){\r\n                case \"name\":\r\n                jsonRequestBody.name = inputElement.value;\r\n                    break;\r\n                case \"instructions\":\r\n                jsonRequestBody.cookingInstructions = inputElement.value;\r\n                    break;\r\n                case \"author\":\r\n                jsonRequestBody.author = inputElement.value;\r\n                    break;\r\n                case \"rating\":\r\n                jsonRequestBody.rating = (inputElement.value) as any as number;\r\n                    break; \r\n                case \"size\":\r\n                jsonRequestBody.servingSize = inputElement.value as any as number;\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    await updateRecipeOnDatabase(jsonRequestBody, recipeId);\r\n}\r\n\r\nconst updateRecipeOnDatabase = async (jsonRequestBody: RecipeRequest, recipeId: number) => {\r\n    const requestOptions = {\r\n        method: 'PATCH',\r\n        headers: {'Content-Type' : 'application/json'},\r\n        body: JSON.stringify(jsonRequestBody)\r\n      }\r\n      await fetch(\"http://localhost:3000/api/recipe/\"+recipeId, requestOptions).then(response => response.json());\r\n}\r\n","import React, { useState, useEffect } from \"react\"\r\nimport { Ingredient, IngredientResponse } from \"./Interfaces/Ingredient\";\r\nimport { IngredientToRecipeResponse, IngredientToRecipe } from \"./Interfaces/IngredientToRecipe\";\r\nimport { Recipe } from \"./Interfaces/Recipe\";\r\nimport { RecipeResponse } from \"./Interfaces/Recipe\";\r\nimport { EmptyMessage } from \"./ResultEmptyMessage\";\r\nimport { AddIngredient} from \"./AddIngredientToRecipe\";\r\nimport { EditRecipe } from \"./EditRecipe\";\r\nimport { Dashboard } from \"./Dashboard\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n\r\nexport const RecipeDetail : React.FC<{recipeId : number, setState: Function}> = ({recipeId, setState}) => {\r\n    const [recipe, setRecipe] = useState<Recipe | null>(null);\r\n    const [ingredients, setIngredients] = useState<Ingredient[] | null>(null);    \r\n\r\n    const fetchIngredients = async () => {\r\n        const ingredientsRequest = await fetch(\"http://localhost:3000/api/recipe/\"+recipeId+\"/ingredients\");\r\n        const ingredients = (await ingredientsRequest.json()) as IngredientResponse\r\n        setIngredients(ingredients.data);\r\n    }\r\n    const fetchRecipe = async () => {\r\n        const recipeRequest = await fetch(\"http://localhost:3000/api/recipe/\"+recipeId);\r\n        const recipeJson = (await recipeRequest.json()) as RecipeResponse;\r\n        setRecipe(recipeJson.data);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchRecipe();\r\n        fetchIngredients();\r\n    }, []);\r\n\r\n    if(recipe === null){\r\n        return <EmptyMessage>Kein Rezept gefunden</EmptyMessage>\r\n    }\r\n\r\n    if(ingredients === null){\r\n        return <><EmptyMessage>Keine Zutaten für dieses Rezept gefunden</EmptyMessage><GenerateRecipe recipe={recipe}></GenerateRecipe><AddIngredient recipeId={recipeId} addHandler={fetchIngredients}/></>\r\n    }\r\n\r\n    var ingredientObjects : any[] = [];\r\n\r\n    ingredients?.forEach(ingredient => {\r\n            ingredientObjects.push(<GenerateIngredient ingredient={ingredient} recipe={recipe} deleteHandler={fetchIngredients}></GenerateIngredient>);\r\n            });        \r\n    \r\n\r\n    \r\n    return <><GenerateRecipe recipe={recipe}>{ingredientObjects}</GenerateRecipe><AddIngredient recipeId={recipeId} addHandler={fetchIngredients}></AddIngredient><EditRecipe recipe={recipe} editHandler={fetchRecipe}></EditRecipe>\r\n    <button onClick={() => setState(true)}>Rezept schließen</button>\r\n    </>  \r\n}\r\n\r\nconst GenerateRecipe : React.FC<{recipe : Recipe}> = ({children, recipe}) => {\r\n    return <section className=\"recipe\" id={recipe.id.toString()+\"recipe\"}>\r\n    <section className=\"recipeName\">Name: </section>\r\n    <section className=\"recipeNameValue\">{recipe.name}</section>\r\n    <section className=\"recipeInstructions\">Anleitung: </section>\r\n    <section className=\"recipeInstructionsValue\">{recipe.cookingInstructions}</section>\r\n    <section className=\"recipeRating\">Bewertung: </section>\r\n    <section className=\"recipeRatingValue\">{recipe.rating}</section>\r\n    <section className=\"recipeServingSize\">Portionsgröße: </section>\r\n    <section className=\"recipeServingSizeValue\">{recipe.servingSize}</section>\r\n    <section className=\"recipeAuthor\">Autor: </section>\r\n    <section className=\"recipeAuthorValue\">{recipe.author}</section>\r\n    <section className=\"ingredients\">{children}</section>\r\n    </section>\r\n  }\r\n\r\nconst GenerateIngredient : React.FC<{ingredient : Ingredient, recipe: Recipe, deleteHandler: Function}> = ({children, ingredient, recipe, deleteHandler}) => {\r\n    return <>\r\n    <section className=\"ingredient\" id={ingredient.id.toString()+\"ingredient\"}>\r\n    <section className=\"ingredientName\">Name: </section>\r\n    <section className=\"ingredientNameValue\">{ingredient.name}</section>\r\n    <IngredientAmount ingredientId={ingredient.id} recipeId={recipe.id}></IngredientAmount>\r\n    <button className=\"deleteIngredientButton\" onClick={()=>{deleteIngredientFromRecipe(ingredient.id, recipe.id).then(deleteHandler())}}>Zutat entfernen</button>\r\n    </section>\r\n    </>\r\n}\r\n\r\n\r\n\r\nexport const IngredientAmount : React.FC<{recipeId : number, ingredientId: number}> = ({recipeId, ingredientId}) => {\r\n    const [ingredientToRecipe, setIngredientToRecipe] = useState<IngredientToRecipe[] | null>(null);\r\n    const fetchIngredientToRecipe = async () => {\r\n        const ingredientToRecipeRequest = await fetch(\"http://localhost:3000/api/ingredientsToRecipe/recipe/\"+recipeId+\"/ingredient/\"+ingredientId);\r\n        const ingredientsToRecipeResponse = (await ingredientToRecipeRequest.json()) as IngredientToRecipeResponse\r\n        setIngredientToRecipe(ingredientsToRecipeResponse.data);\r\n    }\r\n    \r\n  useEffect(() => {\r\n    fetchIngredientToRecipe();\r\n  }, []);\r\n\r\n  if(ingredientToRecipe === null){\r\n    return <EmptyMessage>Die entsprechenden Mengen der Zutaten wurden nicht gefunden</EmptyMessage>;\r\n  }\r\n\r\n  return <><section className=\"ingredientAmount\">Menge: </section><section className=\"ingredientAmountValue\">{ingredientToRecipe[0].amount}</section></>\r\n  \r\n}\r\n\r\nconst deleteIngredientFromRecipe = async (ingredientId: number, recipeId: number) => {\r\n        const requestOptions = {\r\n            method: 'DELETE',\r\n          } \r\n        await fetch(\"http://localhost:3000/api/recipe/\"+recipeId+\"/ingredients/\"+ingredientId, requestOptions).then(response => response.json());\r\n}\r\n\r\n\r\n","import React, { useState } from \"react\";\r\nimport { Recipe, RecipeResponse, RecipeRequest } from \"./Interfaces/Recipe\";\r\n\r\nexport const AddRecipe = () => {\r\n    const [showUseEffect, setShowUseEffect] = useState(false);\r\n    return <>\r\n    <section className=\"addRecipeFormContainer\">\r\n    <button className=\"addRecipeButton\" onClick={() => {\r\n        setShowUseEffect(!showUseEffect);\r\n    }}>Rezept hinzufügen</button>\r\n    {showUseEffect && <AddNewRecipeInterface />}\r\n    </section></>;\r\n}\r\n\r\nconst AddNewRecipeInterface = () => {\r\n    return <>\r\n    <form className=\"addRecipeForm\">\r\n        <label>Name</label>\r\n        <input type=\"text\" name=\"name\"></input>\r\n        <label>Kochanweisungen</label>\r\n        <input type=\"textarea\" name=\"instructions\"></input>\r\n        <label>Autor</label>\r\n        <input type=\"text\" name=\"author\"></input>\r\n        <label>Bewertung</label>\r\n        <input type=\"number\" name=\"rating\"></input>\r\n        <label>Portionsgröße</label>\r\n        <input type=\"number\" name=\"size\"></input>\r\n        <button type=\"button\" onClick={(e)=>{validateAndSave(e.currentTarget.parentElement)}}>Speichern</button>\r\n    </form>\r\n    </>\r\n}\r\n\r\nfunction validateAndSave(recipeForm :HTMLElement | null){\r\n    if(recipeForm === null){\r\n        return;\r\n    }\r\n\r\n    var jsonRequestBody : RecipeRequest = {\r\n        name: \"\",\r\n        cookingInstructions: \"\",\r\n        rating: 0,\r\n        author: \"\",\r\n        servingSize: 0\r\n    };\r\n\r\n    for (let i = 0; i <recipeForm.children.length; i++){\r\n        if(recipeForm.children[i].tagName === \"INPUT\"){\r\n            let inputElement = recipeForm.children[i] as HTMLInputElement;\r\n            switch(inputElement.name){\r\n                case \"name\":\r\n                jsonRequestBody.name = inputElement.value;\r\n                    break;\r\n                case \"instructions\":\r\n                jsonRequestBody.cookingInstructions = inputElement.value;\r\n                    break;\r\n                case \"author\":\r\n                jsonRequestBody.author = inputElement.value;\r\n                    break;\r\n                case \"rating\":\r\n                jsonRequestBody.rating = (inputElement.value) as any as number;\r\n                    break; \r\n                case \"size\":\r\n                jsonRequestBody.servingSize = inputElement.value as any as number;\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    addRecipeToDatabase(jsonRequestBody);\r\n}\r\n\r\nconst addRecipeToDatabase = async (jsonRequestBody: RecipeRequest) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: {'Content-Type' : 'application/json'},\r\n        body: JSON.stringify(jsonRequestBody)\r\n      }\r\n      await fetch(\"http://localhost:3000/api/recipe/\", requestOptions).then(response => response.json());\r\n}","import React, { useState, useEffect, ReactChild, ReactChildren } from \"react\";\r\nimport { RecipeDetail } from \"./RecipeDetail\";\r\nimport { EmptyMessage } from \"./ResultEmptyMessage\";\r\nimport { AddRecipe } from \"./AddRecipe\";\r\n\r\nexport interface AllRecipesResponse {\r\n  data: Recipe[];\r\n}\r\n\r\nexport interface Recipe {\r\n  id: number;\r\n  name: string;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  cookingInstructions: string;\r\n  rating: number;\r\n  author: string;\r\n  servingSize: number;\r\n}\r\n\r\nvar showRecipeDetailsButton : any;\r\nvar recipeDetailId: number = 0;\r\n  \r\n\r\nexport const Dashboard = () => {\r\n  const [recipes, setRecipes] = useState<AllRecipesResponse | null>(null);\r\n  const fetchRecipes = async () => {\r\n    const recipeRequest = await fetch(\"http://localhost:3000/api/recipe\");\r\n    const recipeJson = (await recipeRequest.json()) as AllRecipesResponse;\r\n    setRecipes(recipeJson);\r\n  };\r\n  \r\n  const [showUseEffect, setShowUseEffect] = useState(true);\r\n  \r\n  useEffect(() => {\r\n    fetchRecipes();\r\n  }, []);\r\n\r\n  if(recipes === null){\r\n    return <EmptyMessage>Es wurden keine Rezepte gefunden</EmptyMessage>;\r\n  }\r\n\r\n  \r\nshowRecipeDetailsButton = <button className=\"recipeDetailsButton\" name={recipeDetailId.toString()} onClick={(e) => {setShowUseEffect(!showUseEffect); recipeDetailId = e.currentTarget.parentElement?.className as any as number}}>Rezept öffnen</button>\r\n  var recipeObjects : any[] = [];\r\n  recipes.data.forEach(recipe => {\r\n    recipeObjects.push(<GenerateRecipe recipe={recipe} detailsBtn={showRecipeDetailsButton} setState={fetchRecipes}></GenerateRecipe>);\r\n  });\r\n\r\n  return <>{(showUseEffect && <><GenerateRecipeList>{recipeObjects}</GenerateRecipeList><AddRecipe></AddRecipe></>) || (!showUseEffect && <RecipeDetail setState={setShowUseEffect} recipeId={recipeDetailId}/>)}</>;\r\n\r\n};\r\n\r\nconst GenerateRecipeList : React.FC<{}> = ({children}) => {\r\n  return <section className=\"recipeContainer\">{children}</section>\r\n}\r\n\r\nconst GenerateRecipe : React.FC<{recipe : Recipe, detailsBtn : any, setState: Function}> = ({children, recipe, detailsBtn, setState}) => {\r\n  return <section className=\"recipe\" id={recipe.id.toString()+\"recipe\"}>\r\n  <section className=\"recipeName\">Name: </section>\r\n  <section className=\"recipeNameValue\">{recipe.name}</section>\r\n  <section className=\"recipeInstructions\">Anleitung: </section>\r\n  <section className=\"recipeInstructionsValue\">{recipe.cookingInstructions}</section>\r\n  <section className=\"recipeRating\">Bewertung: </section>\r\n  <section className=\"recipeRatingValue\">{recipe.rating}</section>\r\n  <section className=\"recipeServingSize\">Portionsgröße: </section>\r\n  <section className=\"recipeServingSizeValue\">{recipe.servingSize}</section>\r\n  <section className=\"recipeAuthor\">Autor: </section>\r\n  <section className=\"recipeAuthorValue\">{recipe.author}</section>\r\n  <section className=\"recipeButtons\"><section className={recipe.id.toString()}><button className={recipe.id.toString()} onClick={(e) => {deleteRecipe(recipe.id)}}>Dieses Rezept löschen</button>\r\n  {detailsBtn}</section></section>\r\n  </section>\r\n}\r\n\r\nasync function deleteRecipe(recipeId: number){\r\n  const requestOptions = {\r\n    method: 'DELETE'\r\n  }\r\n  await fetch(\"http://localhost:3000/api/recipe/\" + recipeId, requestOptions).then(response => response.json());\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Dashboard } from \"./Dashboard\";\r\nimport { AddRecipe } from \"./AddRecipe\";\r\n\r\nconst main = document.getElementsByTagName(\"main\")[0];\r\nReactDOM.render(<Dashboard />, main);\r\n"],"sourceRoot":""}